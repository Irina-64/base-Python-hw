import telebot
from telebot import types
import json
from datetime import datetime
import os

bot = telebot.TeleBot("7444456257:AAFnxtKc839wDlTBoGw3dOxwy9_mJAP8jU0")
TASK_FILE = "tasks.json"
tasks = []

# === –ö–õ–ê–°–° –ó–ê–î–ê–ß–ò ===
class Task:
    def __init__(self, description, deadline, completed=False):
        self.description = description
        self.deadline = deadline
        self.completed = completed

    def mark_done(self):
        self.completed = True

    def to_dict(self):
        return {
            "description": self.description,
            "deadline": self.deadline,
            "completed": self.completed
        }

    @staticmethod
    def from_dict(data):
        return Task(data["description"], data["deadline"], data["completed"])

    def __str__(self):
        status = "‚úÖ" if self.completed else "‚ùå"
        return f"{status} {self.description} (–¥–æ {self.deadline})"


# === –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ===
def load_tasks():
    if os.path.exists(TASK_FILE):
        with open(TASK_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return [Task.from_dict(d) for d in data]
    return []

def save_tasks():
    with open(TASK_FILE, "w", encoding="utf-8") as f:
        json.dump([t.to_dict() for t in tasks], f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∑–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
tasks = load_tasks()


# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===
@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("/add", "/list", "/done", "/store", "/help")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –∏ —Ç–æ–≤–∞—Ä–æ–≤ üßæ", reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n/list ‚Äî —Å–ø–∏—Å–æ–∫\n/done ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n/store ‚Äî –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏")

@bot.message_handler(commands=['add'])
def add_task(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–û–ø–∏—Å–∞–Ω–∏–µ | –î–î.–ú–ú.–ì–ì–ì–ì`", parse_mode='Markdown')
    bot.register_next_step_handler(msg, process_task_input)

def process_task_input(message):
    try:
        description, date_str = map(str.strip, message.text.split('|'))
        datetime.strptime(date_str, "%d.%m.%Y")  # –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        task = Task(description, date_str)
        tasks.append(task)
        save_tasks()
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except:
        bot.send_message(message.chat.id, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /add")

@bot.message_handler(commands=['list'])
def list_tasks(message):
    not_done = [str(t) for t in tasks if not t.completed]
    if not not_done:
        bot.send_message(message.chat.id, "üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    else:
        msg = "\n".join(f"{i+1}. {t}" for i, t in enumerate(not_done))
        bot.send_message(message.chat.id, f"üìã –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n{msg}")

@bot.message_handler(commands=['done'])
def done_task(message):
    not_done = [t for t in tasks if not t.completed]
    if not not_done:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    msg = "\n".join(f"{i+1}. {t.description}" for i, t in enumerate(not_done))
    msg += "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:"
    sent = bot.send_message(message.chat.id, msg)
    bot.register_next_step_handler(sent, process_done)

def process_done(message):
    try:
        index = int(message.text) - 1
        not_done = [t for t in tasks if not t.completed]
        if 0 <= index < len(not_done):
            not_done[index].mark_done()
            save_tasks()
            bot.send_message(message.chat.id, "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except:
        bot.send_message(message.chat.id, "‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")


# === –ö–õ–ê–°–° –ú–ê–ì–ê–ó–ò–ù–ê ===
class Store:
    def __init__(self, name, address):
        self.name = name
        self.address = address
        self.items = {}

    def add_item(self, name, price):
        self.items[name] = price

    def remove_item(self, name):
        self.items.pop(name, None)

    def get_price(self, name):
        return self.items.get(name)

    def update_price(self, name, new_price):
        if name in self.items:
            self.items[name] = new_price

    def __str__(self):
        return f"{self.name} ({self.address})\n–¢–æ–≤–∞—Ä—ã: {self.items}"


@bot.message_handler(commands=["store"])
def store_example(message):
    store = Store("–§—Ä—É–∫—Ç—ã –∏ –Ø–≥–æ–¥—ã", "—É–ª. –°–∞–¥–æ–≤–∞—è, 12")
    store.add_item("–Ø–±–ª–æ–∫–∏", 0.5)
    store.add_item("–í–∏—à–Ω—è", 1.2)
    store.update_price("–Ø–±–ª–æ–∫–∏", 0.55)
    store.remove_item("–í–∏—à–Ω—è")
    reply = str(store)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞:\n\n{reply}")


bot.polling(none_stop=True)
