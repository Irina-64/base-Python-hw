import telebot
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import random
import json
import os
from pytz import timezone
import datetime

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot('API TOCKEN')

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
USERS_FILE = "users.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                data = f.read().strip()
                if not data:
                    return set()
                return set(json.loads(data))
        except json.JSONDecodeError:
            print("‚ö†Ô∏è –§–∞–π–ª users.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –ø—É—Å—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
            return set()
    return set()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users():
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(list(active_users), f)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
active_users = load_users()

# –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤
facts = [
    "üíß –í–æ–¥–∞ –Ω–∞ –ó–µ–º–ª–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ —Å–∞–º–æ–π –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "üíß –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ –∏–Ω–æ–≥–¥–∞ –∑–∞–º–µ—Ä–∑–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ö–æ–ª–æ–¥–Ω–æ–π (—ç—Ñ—Ñ–µ–∫—Ç –ú–ø–µ–º–±–∞).",
    "üíß –í –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –ó–µ–º–ª–∏ –±–æ–ª—å—à–µ –≤–æ–¥—ã, —á–µ–º –≤–æ –≤—Å–µ—Ö —Ä–µ–∫–∞—Ö –≤–º–µ—Å—Ç–µ –≤–∑—è—Ç—ã—Ö.",
    "üíß –ë–æ–ª—å—à–µ –≤–æ–¥—ã –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ, —á–µ–º –≤–æ –≤—Å–µ—Ö —Ä–µ–∫–∞—Ö –º–∏—Ä–∞ ‚Äî —ç—Ç–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –≥–∏–¥—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ü–∏–∫–ª–∞."
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler(timezone=timezone("Europe/Moscow"))

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_water_reminder():
    print(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(active_users)} ‚Äî {datetime.datetime.now()}")
    for user_id in active_users:
        bot.send_message(user_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî –≤—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã üíß")

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ú–°–ö: 9:00, 13:00, 18:00)
scheduler.add_job(send_water_reminder, CronTrigger(hour=8, minute=0))
scheduler.add_job(send_water_reminder, CronTrigger(hour=13, minute=0))
scheduler.add_job(send_water_reminder, CronTrigger(hour=18, minute=0))
scheduler.start()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    user_id = message.chat.id
    if user_id in active_users:
        bot.send_message(user_id, "–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üíß")
    else:
        active_users.add(user_id)
        save_users()
        bot.send_message(user_id, "–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ üíß")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("/info"),
        types.KeyboardButton("/fact"),
        types.KeyboardButton("/stop")
    )
    bot.send_message(user_id, "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ üëá", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /stop
@bot.message_handler(commands=["stop"])
def stop_handler(message):
    user_id = message.chat.id
    if user_id in active_users:
        active_users.remove(user_id)
        save_users()
        bot.send_message(user_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå –¢—ã –º–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    else:
        bot.send_message(user_id, "–¢—ã —É–∂–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ü§∑‚Äç‚ôÇÔ∏è")

# –ö–æ–º–∞–Ω–¥–∞ /info
@bot.message_handler(commands=["info"])
def info_handler(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –ø–∏—Ç—å –≤–æ–¥—É 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å üïò üïê üïï")

# –ö–æ–º–∞–Ω–¥–∞ /fact
@bot.message_handler(commands=["fact"])
def fact_handler(message):
    bot.send_message(message.chat.id, random.choice(facts))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
