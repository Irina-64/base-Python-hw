import random
from abc import ABC, abstractmethod


# Weapon Interface
class Weapon(ABC):
    @abstractmethod
    def attack(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞"""
        pass


# Concrete Weapons
class Sword(Weapon):
    def attack(self):
        damage = random.randint(15, 30)
        print(f"‚öîÔ∏è –ú–µ—á –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞.")
        return damage


class Bow(Weapon):
    def attack(self):
        damage = random.randint(10, 25)
        print(f"üèπ –õ—É–∫ –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞.")
        return damage


class Axe(Weapon):
    def attack(self):
        damage = random.randint(20, 35)
        print(f"ü™ì –¢–æ–ø–æ—Ä –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞.")
        return damage


# Fighter
class Fighter:
    def __init__(self, name):
        self.name = name
        self.weapon: Weapon = None
        self.experience = 0

    def change_weapon(self, weapon: Weapon):
        self.weapon = weapon
        print(f"{self.name} –≤—ã–±–∏—Ä–∞–µ—Ç {weapon.__class__.__name__}")

    def gain_experience(self, points: int):
        self.experience += points
        print(f"üåü {self.name} –ø–æ–ª—É—á–∞–µ—Ç {points} XP! –û–±—â–∏–π –æ–ø—ã—Ç: {self.experience}")

    def attack(self, monster):
        if not self.weapon:
            print("‚ùó –ù–µ—Ç –æ—Ä—É–∂–∏—è!")
            return
        damage = self.weapon.attack()
        monster.take_damage(damage)
        self.gain_experience(damage)


# Monster
class Monster:
    def __init__(self, name):
        self.name = name
        self.health = random.randint(60, 120)

    def take_damage(self, damage: int):
        self.health -= damage
        print(f"üí• {self.name} –ø–æ–ª—É—á–∞–µ—Ç {damage} —É—Ä–æ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å HP: {max(self.health, 0)}")
        if self.health <= 0:
            print(f"‚ò†Ô∏è {self.name} –ø–æ–±–µ–∂–¥–µ–Ω!")

    def is_alive(self) -> bool:
        return self.health > 0


# Weapon Factory
def get_weapon_by_choice(choice: str):
    weapons = {
        "sword": Sword,
        "bow": Bow,
        "axe": Axe
    }
    weapon_class = weapons.get(choice.lower())
    return weapon_class() if weapon_class else None


# Game Loop
def game():
    print("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –í—ã–±–æ—Ä –æ—Ä—É–∂–∏—è: sword, bow, axe")

    fighter = Fighter("–ì–µ—Ä–æ–π")
    monster = Monster("–ì–æ–±–ª–∏–Ω")

    print(f"üßü –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {monster.name}, HP: {monster.health}")

    while monster.is_alive():
        choice = input("üî´ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ").strip()
        if choice:
            weapon = get_weapon_by_choice(choice)
            if weapon:
                fighter.change_weapon(weapon)
            else:
                print("‚ùå –û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                continue
        fighter.attack(monster)

    print(f"\nüéâ –ü–æ–±–µ–¥–∞! –ò—Ç–æ–≥–æ–≤—ã–π –æ–ø—ã—Ç: {fighter.experience} XP")


if __name__ == "__main__":
    game()
